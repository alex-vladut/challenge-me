type User
  @model(mutations: { update: "updateUser" }, queries: { get: "getUser" }, subscriptions: null)
  @versioned {
  id: ID!
  name: String!
  pictureUrl: AWSURL
  bio: String
  email: AWSEmail
  participations: [Participation!] @connection(name: "UserActivities")
}

type Activity
  @model(mutations: null, queries: { get: "getActivity" }, subscriptions: null)
  @key(name: "geo-hash-range-index", fields: ["hashKey", "rangeKey"], queryField: "byGeolocation")
  @key(name: "geohash-index", fields: ["hashKey", "geohash"], queryField: "byHashByGeohash")
  @versioned {
  id: ID!
  owner: User @connection
  description: String!
  sport: String!
  dateTime: AWSDateTime!
  numberOfAttendants: Int!
  location: Location!
  address: String! # human readable address (can't include it in Location because ES breaks)
  participations: [Participation] @connection(name: "ActivityParticipants")
  comments: [Comment] @connection(name: "ActivityComments", sortField: "createdAt")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  # geolocation with DynamoDB
  hashKey: Int!
  rangeKey: String!
  geohash: Int!
}

type Location {
  lat: Float!
  lon: Float!
}

type Participation
  @model(
    mutations: { create: "createParticipation", update: "updateParticipation" }
    queries: { get: "getParticipation" }
    subscriptions: { onCreate: ["onCreateUpdateParticipation"], onUpdate: ["onCreateUpdateParticipation"] }
  )
  @versioned {
  id: ID!
  activity: Activity! @connection(name: "ActivityParticipants")
  participant: User @connection(name: "UserActivities")
  participationParticipantId: String # This references the auto-generated participationParticipantId field in DynamoDB
  status: ParticipationStatus!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Comment
  @model(mutations: { create: "createComment" }, queries: null, subscriptions: null)
  @versioned {
  id: ID!
  activity: Activity! @connection(name: "ActivityComments", sortField: "createdAt")
  user: User @connection
  text: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

enum ParticipationStatus {
  ACCEPTED
  REJECTED
}

input DeleteActivityInput {
  id: ID!
}

type DeleteActivityResult {
  id: ID!
}

input SendMessageInput {
  name: String!
  email: String!
  message: String!
}

input LocationInput {
  lat: Float!
  lon: Float!
}

input CreateActivityInput {
  description: String!
  sport: String!
  dateTime: String!
  numberOfAttendants: Int!
  location: LocationInput!
  address: String!
}

type Mutation {
  createActivity(input: CreateActivityInput!): Activity! @function(name: "create-activity-${env}")
  deleteActivity(input: DeleteActivityInput!): DeleteActivityResult!
  sendMessage(input: SendMessageInput!): String @function(name: "SubmitContactUsMessage-${env}")
}

type ActivityConnection {
  items: [Activity]
  total: Int
  nextToken: String
}

type Query {
  nearbyActivitiesDdb(location: LocationInput!, km: Int): ActivityConnection
    @function(name: "nearby-activities-ddb-${env}")
}
