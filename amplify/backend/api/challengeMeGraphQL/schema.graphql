type User
  @model
  @versioned
  @auth(rules: [{ allow: owner, ownerField: "id", operations: [update] }, { allow: private, operations: [read] }]) {
  id: ID!
  name: String!
  pictureUrl: String
  email: String
  activities: [Participation!] @connection(name: "UserActivities")
}

type Activity
  @model(mutations: { create: "createActivity" }, subscriptions: null)
  @searchable
  @auth(
    rules: [
      { allow: owner, ownerField: "activityOwnerId", operations: [create] }
      { allow: private, operations: [read] }
    ]
  )
  @versioned {
  id: ID!
  owner: User @connection
  description: String!
  sport: String!
  dateTime: String!
  numberOfAttendants: Int!
  location: Location!
  participations: [Participation!] @connection(name: "ActivityParticipants")
  createdAt: String
  updatedAt: String
}

type Location {
  latitude: Float!
  longitude: Float!
  address: String!
}

# Create a join model and disable queries as you don't need them
# and can query through Activity.participants and User.activities
type Participation @model @auth(rules: [{ allow: private }]) @auth(rules: [{ allow: private }]) @versioned {
  id: ID!
  activity: Activity! @connection(name: "ActivityParticipants")
  participant: User! @connection(name: "UserActivities")
  status: ParticipationStatus!
}

enum ParticipationStatus {
  ACCEPTED
  REJECTED
}

input DeleteActivityInput {
  id: ID!
}

type Mutation {
  deleteActivity(input: DeleteActivityInput!): Activity!
    @function(name: "delete-activity-${env}")
    @function(name: "delete-participations-${env}")
}
