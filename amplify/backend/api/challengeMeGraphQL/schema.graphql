# two types of activities: pick a number of attendants and don't allow any more submission
# or allow any number of submissions and the user will decide who will be allowed
type User @model @versioned {
  id: ID!
  name: String!
  pictureUrl: String
  activities: [Participation!] @connection(name: "UserActivities")
}

type Activity @model @versioned {
  id: ID!
  description: String!
  owner: User @connection
  dateTime: String!
  numberOfAttendants: Int!
  participants: [Participation!] @connection(name: "ActivityParticipants")
  createdAt: String
  updatedAt: String
}

# Create a join model and disable queries as you don't need them
# and can query through Activity.participants and User.activities
type Participation @model @key(name: "ByActivity", fields: ["activityId"], queryField: "participationsByActivityId") {
  id: ID!
  activity: Activity! @connection(name: "ActivityParticipants")
  participant: User! @connection(name: "UserActivities")
  # required for @key in order to make it searchable
  activityId: ID!
  status: ParticipationStatus!
}

enum ParticipationStatus {
  ACCEPTED
  REJECTED
}
