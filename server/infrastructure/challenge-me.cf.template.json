{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Resources allowing users to authenticate and use the system",
    "Parameters": {
        "GoogleClientIdParam": {
            "Type": "String",
            "Description": "Enter the Google signin client ID"
        },
        "LambdaPackageS3BucketParam": {
            "Type": "String",
            "Description": "Enter the S3 bucket name where Lambda deployment packages will be stored"
        },
        "ClientS3BucketParam": {
            "Type": "String",
            "Description": "Enter the S3 bucket name where client app will be stored"
        }
    },
    "Resources": {
        "FederatedIdentityPool": {
            "Type": "AWS::Cognito::IdentityPool",
            "Properties": {
                "IdentityPoolName": "FederatedIdentityPool",
                "AllowUnauthenticatedIdentities": true,
                "SupportedLoginProviders": {
                    "accounts.google.com": {
                        "Ref": "GoogleClientIdParam"
                    }
                }
            }
        },
        "AuthenticatedCognitoRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Federated": "cognito-identity.amazonaws.com"
                            },
                            "Action": "sts:AssumeRoleWithWebIdentity",
                            "Condition": {
                                "StringEquals": {
                                    "cognito-identity.amazonaws.com:aud": {
                                        "Ref": "FederatedIdentityPool"
                                    }
                                },
                                "ForAnyValue:StringLike": {
                                    "cognito-identity.amazonaws.com:amr": "authenticated"
                                }
                            }
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"
                ]
            }
        },
        "UnauthenticatedCognitoRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Federated": "cognito-identity.amazonaws.com"
                            },
                            "Action": "sts:AssumeRoleWithWebIdentity",
                            "Condition": {
                                "StringEquals": {
                                    "cognito-identity.amazonaws.com:aud": {
                                        "Ref": "FederatedIdentityPool"
                                    }
                                },
                                "ForAnyValue:StringLike": {
                                    "cognito-identity.amazonaws.com:amr": "unauthenticated"
                                }
                            }
                        }
                    ]
                },
                "Path": "/",
                "Policies": []
            }
        },
        "IdentityPoolRoleAttachment": {
            "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
            "Properties": {
                "IdentityPoolId": {
                    "Ref": "FederatedIdentityPool"
                },
                "Roles": {
                    "authenticated": {
                        "Fn::GetAtt": [
                            "AuthenticatedCognitoRole",
                            "Arn"
                        ]
                    },
                    "unauthenticated": {
                        "Fn::GetAtt": [
                            "UnauthenticatedCognitoRole",
                            "Arn"
                        ]
                    }
                }
            }
        },
        "UserTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "1",
                    "WriteCapacityUnits": "1"
                },
                "TableName": "user"
            }
        },
        "LambdaFunctionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "LambdaFunctionRolePolicy",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:PutItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    "arn:aws:dynamodb:eu-central-1",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    "table/user"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    "arn:aws:dynamodb:eu-central-1",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    "table/challenge"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ]
            }
        },
        "GetUser": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": "GetUser",
                "Code": {
                    "S3Bucket": {
                        "Ref": "LambdaPackageS3Bucket"
                    },
                    "S3Key": "challenge-me.zip"
                },
                "Handler": "src/handler/users_handler.getUser",
                "MemorySize": "128",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaFunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs8.10",
                "Timeout": "5"
            }
        },
        "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": "CreateUser",
                "Code": {
                    "S3Bucket": {
                        "Ref": "LambdaPackageS3Bucket"
                    },
                    "S3Key": "challenge-me.zip"
                },
                "Handler": "src/handler/users_handler.createUser",
                "MemorySize": "128",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaFunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs8.10",
                "Timeout": "5"
            }
        },
        "GetUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": "GetUsers",
                "Code": {
                    "S3Bucket": {
                        "Ref": "LambdaPackageS3Bucket"
                    },
                    "S3Key": "challenge-me.zip"
                },
                "Handler": "src/handler/users_handler.getUsers",
                "MemorySize": "128",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaFunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs8.10",
                "Timeout": "5"
            }
        },
        "ChallengeMeApiGateway": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": "ChallengeMe API",
                "Description": "API used for ChallengeMe requests",
                "FailOnWarnings": true
            }
        },
        "ApiGatewayGetUserLambdaInvocationPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "FunctionName": "GetUser",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:aws:execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ChallengeMeApiGateway"
                            },
                            "/*"
                        ]
                    ]
                }
            }
        },
        "ApiGatewayCreateUserLambdaInvocationPermission": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": "CreateUserLambdaFunction",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "FunctionName": "CreateUser",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:aws:execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ChallengeMeApiGateway"
                            },
                            "/*"
                        ]
                    ]
                }
            }
        },
        "ApiGatewayGetUsersLambdaInvocationPermission": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": "GetUsersLambdaFunction",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "FunctionName": "GetUsers",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:aws:execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ChallengeMeApiGateway"
                            },
                            "/*"
                        ]
                    ]
                }
            }
        },
        "ChallengeMeApiStage": {
            "DependsOn": [
                "ApiGatewayAccount"
            ],
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "DeploymentId": {
                    "Ref": "ApiDeployment"
                },
                "MethodSettings": [
                    {
                        "DataTraceEnabled": true,
                        "HttpMethod": "*",
                        "LoggingLevel": "INFO",
                        "ResourcePath": "/*"
                    }
                ],
                "RestApiId": {
                    "Ref": "ChallengeMeApiGateway"
                },
                "StageName": "production"
            }
        },
        "ApiGatewayCloudWatchLogsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "apigateway.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "ApiGatewayLogsPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:DescribeLogGroups",
                                        "logs:DescribeLogStreams",
                                        "logs:PutLogEvents",
                                        "logs:GetLogEvents",
                                        "logs:FilterLogEvents"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ApiGatewayAccount": {
            "Type": "AWS::ApiGateway::Account",
            "Properties": {
                "CloudWatchRoleArn": {
                    "Fn::GetAtt": [
                        "ApiGatewayCloudWatchLogsRole",
                        "Arn"
                    ]
                }
            }
        },
        "ApiDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "RestApiId": {
                    "Ref": "ChallengeMeApiGateway"
                }
            }
        },
        "ProfileResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "ChallengeMeApiGateway"
                },
                "ParentId": {
                    "Fn::GetAtt": [
                        "ChallengeMeApiGateway",
                        "RootResourceId"
                    ]
                },
                "PathPart": "profile"
            }
        },
        "UsersResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "ChallengeMeApiGateway"
                },
                "ParentId": {
                    "Fn::GetAtt": [
                        "ChallengeMeApiGateway",
                        "RootResourceId"
                    ]
                },
                "PathPart": "users"
            }
        },
        "GetProfileRequest": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:648877925551:function:GetUser/invocations"
                },
                "ResourceId": {
                    "Ref": "ProfileResource"
                },
                "RestApiId": {
                    "Ref": "ChallengeMeApiGateway"
                },
                "MethodResponses": [
                    {
                        "ResponseModels": {
                            "application/json": "Empty"
                        },
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true,
                            "method.response.header.Access-Control-Allow-Origin": true
                        },
                        "StatusCode": 200
                    }
                ]
            }
        },
        "PostProfileRequest": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "POST",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:648877925551:function:CreateUser/invocations"
                },
                "ResourceId": {
                    "Ref": "ProfileResource"
                },
                "RestApiId": {
                    "Ref": "ChallengeMeApiGateway"
                },
                "MethodResponses": [
                    {
                        "ResponseModels": {
                            "application/json": "Empty"
                        },
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true,
                            "method.response.header.Access-Control-Allow-Origin": true
                        },
                        "StatusCode": 200
                    }
                ]
            }
        },
        "ProfileRequestCORS": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "Integration": {
                    "Type": "MOCK",
                    "IntegrationResponses": [
                        {
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "ResponseTemplates": {
                                "application/json": ""
                            },
                            "StatusCode": "200"
                        }
                    ],
                    "PassthroughBehavior": "NEVER",
                    "RequestTemplates": {
                        "application/json": "{\"statusCode\": 200}"
                    }
                },
                "ResourceId": {
                    "Ref": "ProfileResource"
                },
                "RestApiId": {
                    "Ref": "ChallengeMeApiGateway"
                },
                "MethodResponses": [
                    {
                        "ResponseModels": {
                            "application/json": "Empty"
                        },
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true,
                            "method.response.header.Access-Control-Allow-Origin": true
                        },
                        "StatusCode": 200
                    }
                ]
            }
        },
        "GetUsersRequest": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:648877925551:function:GetUsers/invocations"
                },
                "ResourceId": {
                    "Ref": "UsersResource"
                },
                "RestApiId": {
                    "Ref": "ChallengeMeApiGateway"
                },
                "MethodResponses": [
                    {
                        "ResponseModels": {
                            "application/json": "Empty"
                        },
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true,
                            "method.response.header.Access-Control-Allow-Origin": true
                        },
                        "StatusCode": 200
                    }
                ]
            }
        },
        "UsersRequestCORS": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "Integration": {
                    "Type": "MOCK",
                    "IntegrationResponses": [
                        {
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "ResponseTemplates": {
                                "application/json": ""
                            },
                            "StatusCode": "200"
                        }
                    ],
                    "PassthroughBehavior": "NEVER",
                    "RequestTemplates": {
                        "application/json": "{\"statusCode\": 200}"
                    }
                },
                "ResourceId": {
                    "Ref": "UsersResource"
                },
                "RestApiId": {
                    "Ref": "ChallengeMeApiGateway"
                },
                "MethodResponses": [
                    {
                        "ResponseModels": {
                            "application/json": "Empty"
                        },
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true,
                            "method.response.header.Access-Control-Allow-Origin": true
                        },
                        "StatusCode": 200
                    }
                ]
            }
        },
        "ApplicationAPI4XXGatewayResponses": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
                "ResponseParameters": {
                    "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                    "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
                },
                "ResponseType": "DEFAULT_4XX",
                "RestApiId": {
                    "Ref": "ChallengeMeApiGateway"
                }
            }
        },
        "ApplicationAPI5XXGatewayResponses": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
                "ResponseParameters": {
                    "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                    "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
                },
                "ResponseType": "DEFAULT_5XX",
                "RestApiId": {
                    "Ref": "ChallengeMeApiGateway"
                }
            }
        },
        "LambdaPackageS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Ref": "LambdaPackageS3BucketParam"
                }
            }
        },
        "ClientAppS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Ref": "ClientS3BucketParam"
                },
                "AccessControl": "PublicRead",
                "WebsiteConfiguration": {
                    "IndexDocument": "index.html",
                    "ErrorDocument": "error.html"
                }
            }
        },
        "BucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "MyPolicy",
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "PublicReadForGetBucketObjects",
                            "Effect": "Allow",
                            "Principal": "*",
                            "Action": "s3:GetObject",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "ClientAppS3Bucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Bucket": {
                    "Ref": "ClientAppS3Bucket"
                }
            }
        }
    },
    "Outputs": {
        "FederatedIdentityPoolId": {
            "Description": "The ARN of the newly created Cognito Identity Pool.",
            "Value": {
                "Ref": "FederatedIdentityPool"
            }
        },
        "ApiGatewayUrl": {
            "Description": "The URL of the newly created API-Gateway API.",
            "Value": {
                "Ref": "ChallengeMeApiGateway"
            }
        },
        "WebsiteURL": {
            "Value": {
                "Fn::GetAtt": [
                    "ClientAppS3Bucket",
                    "WebsiteURL"
                ]
            },
            "Description": "URL for website hosted on S3"
        },
        "ClientAppS3BucketSecureURL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "ClientAppS3Bucket",
                                "DomainName"
                            ]
                        }
                    ]
                ]
            },
            "Description": "Name of S3 bucket to hold website content"
        }
    }
}